# in
# S I
# (3 <= S <=19) (0 <= I <= N = (S * (S + 1)) / 2)
# r c cc
# (1 <= r <= s) (1 <= c <= r) (0 <= cc <= 2; rgb)
#
# out
# num of solution
#

# pass
#   for each in group
#     if 2
#       fill
#       filled += 1
#     if 3 and wrong
#        return
#   if full
#     s += 1
#   else
#     from r to b
#       push
#       guess
#       pass
#       pop

import copy

s = input()
S = int(s.split()[0])
I = int(s.split()[1])
stack = []
T = [None]
f = I
G = []
sol = 0

N = int((S * (S + 1)) / 2)
for i in range(1, S + 1):
  T.append([None])
  for j in range(1, i + 1):
    T[i].append(-1)

for i in range(0, I):
  s = input()
  r = int(s.split()[0])
  c = int(s.split()[1])
  cc = int(s.split()[2])
  T[r][c] = cc

def go(T, G, S, f, sol, I):
  for i in range(1, S):
    for j in range(1, i + 1):
      if [T[i][j], T[i+1][j], T[i+1][j+1]].count(-1) == 1:
        fill([T[i][j], T[i+1][j], T[i+1][j+1]], T)
        print(G)
        f += 1
        if f == N:
          sol += 1
          f = I
          return
      elif [T[i][j], T[i+1][j], T[i+1][j+1]].count(-1) == 0 and isWrong([T[i][j], T[i+1][j], T[i+1][j+1]]):
        return
  for i in range(0, 3):
    stack.append(copy.deepcopy(T))
    print("push")
    guess(i, T, S)
    go(T, G, S, f, sol, I)
    print("pop")
    T = stack.pop()
    G = []
    for i in range(1, S):
      for j in range(1, i + 1):
        t = T[i][j]
        l = T[i+1][j]
        r = T[i+1][j+1]
        g = [[i, j], [t, l, r]]
        G.append(g)

def isWrong(g):
  if len(set(g)) == 2:
    return True

def fill(g, T):
  if len(set(g)) != 3:
    if g[0] == -1:
      T[i][j][0] = g[1][1][0]
    elif g[1] == -1:
      T[i+1][j][0] = g[1][0][0]
    elif g[2] == -1:
      T[i+1][j+1][0] = g[1][0][0]
  else:
    if g[1][0][0] == -1:
      tmp = [item for item in [0, 1, 2] if item not in [g[1][0][0], g[1][1][0], g[1][2][0]]]
      T[i][j][0] = tmp[0]
    elif g[1][1][0] == -1:
      tmp = [item for item in [0, 1, 2] if item not in [g[1][0][0], g[1][1][0], g[1][2][0]]]
      T[i+1][j][0] = tmp[0]
    elif g[1][2][0] == -1:
      tmp = [item for item in [0, 1, 2] if item not in [g[1][0][0], g[1][1][0], g[1][2][0]]]
      T[i+1][j+1][0] = tmp[0]

def guess(cc, T, S):
  for i in range(1, S + 1):
    for j in range(1, i + 1):
      if T[i][j][0] == -1:
        T[i][j][0] = cc
        return
      
go(T, G, S, f, sol, I)
print(sol)


